/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as UtilitiesRouteImport } from './routes/utilities'
import { Route as StockRouteImport } from './routes/stock'
import { Route as SoilAnalysisRouteImport } from './routes/soil-analysis'
import { Route as SettingsRouteImport } from './routes/settings'
import { Route as ReportsRouteImport } from './routes/reports'
import { Route as RegisterRouteImport } from './routes/register'
import { Route as ParcelsRouteImport } from './routes/parcels'
import { Route as LoginRouteImport } from './routes/login'
import { Route as InfrastructureRouteImport } from './routes/infrastructure'
import { Route as EmployeesRouteImport } from './routes/employees'
import { Route as DayLaborersRouteImport } from './routes/day-laborers'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as AuthenticatedRouteImport } from './routes/_authenticated'
import { Route as ModuleIdRouteImport } from './routes/$moduleId'
import { Route as IndexRouteImport } from './routes/index'

const UtilitiesRoute = UtilitiesRouteImport.update({
  id: '/utilities',
  path: '/utilities',
  getParentRoute: () => rootRouteImport,
} as any)
const StockRoute = StockRouteImport.update({
  id: '/stock',
  path: '/stock',
  getParentRoute: () => rootRouteImport,
} as any)
const SoilAnalysisRoute = SoilAnalysisRouteImport.update({
  id: '/soil-analysis',
  path: '/soil-analysis',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const ReportsRoute = ReportsRouteImport.update({
  id: '/reports',
  path: '/reports',
  getParentRoute: () => rootRouteImport,
} as any)
const RegisterRoute = RegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRouteImport,
} as any)
const ParcelsRoute = ParcelsRouteImport.update({
  id: '/parcels',
  path: '/parcels',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const InfrastructureRoute = InfrastructureRouteImport.update({
  id: '/infrastructure',
  path: '/infrastructure',
  getParentRoute: () => rootRouteImport,
} as any)
const EmployeesRoute = EmployeesRouteImport.update({
  id: '/employees',
  path: '/employees',
  getParentRoute: () => rootRouteImport,
} as any)
const DayLaborersRoute = DayLaborersRouteImport.update({
  id: '/day-laborers',
  path: '/day-laborers',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedRoute = AuthenticatedRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const ModuleIdRoute = ModuleIdRouteImport.update({
  id: '/$moduleId',
  path: '/$moduleId',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$moduleId': typeof ModuleIdRoute
  '/dashboard': typeof DashboardRoute
  '/day-laborers': typeof DayLaborersRoute
  '/employees': typeof EmployeesRoute
  '/infrastructure': typeof InfrastructureRoute
  '/login': typeof LoginRoute
  '/parcels': typeof ParcelsRoute
  '/register': typeof RegisterRoute
  '/reports': typeof ReportsRoute
  '/settings': typeof SettingsRoute
  '/soil-analysis': typeof SoilAnalysisRoute
  '/stock': typeof StockRoute
  '/utilities': typeof UtilitiesRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/$moduleId': typeof ModuleIdRoute
  '/dashboard': typeof DashboardRoute
  '/day-laborers': typeof DayLaborersRoute
  '/employees': typeof EmployeesRoute
  '/infrastructure': typeof InfrastructureRoute
  '/login': typeof LoginRoute
  '/parcels': typeof ParcelsRoute
  '/register': typeof RegisterRoute
  '/reports': typeof ReportsRoute
  '/settings': typeof SettingsRoute
  '/soil-analysis': typeof SoilAnalysisRoute
  '/stock': typeof StockRoute
  '/utilities': typeof UtilitiesRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/$moduleId': typeof ModuleIdRoute
  '/_authenticated': typeof AuthenticatedRoute
  '/dashboard': typeof DashboardRoute
  '/day-laborers': typeof DayLaborersRoute
  '/employees': typeof EmployeesRoute
  '/infrastructure': typeof InfrastructureRoute
  '/login': typeof LoginRoute
  '/parcels': typeof ParcelsRoute
  '/register': typeof RegisterRoute
  '/reports': typeof ReportsRoute
  '/settings': typeof SettingsRoute
  '/soil-analysis': typeof SoilAnalysisRoute
  '/stock': typeof StockRoute
  '/utilities': typeof UtilitiesRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/$moduleId'
    | '/dashboard'
    | '/day-laborers'
    | '/employees'
    | '/infrastructure'
    | '/login'
    | '/parcels'
    | '/register'
    | '/reports'
    | '/settings'
    | '/soil-analysis'
    | '/stock'
    | '/utilities'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/$moduleId'
    | '/dashboard'
    | '/day-laborers'
    | '/employees'
    | '/infrastructure'
    | '/login'
    | '/parcels'
    | '/register'
    | '/reports'
    | '/settings'
    | '/soil-analysis'
    | '/stock'
    | '/utilities'
  id:
    | '__root__'
    | '/'
    | '/$moduleId'
    | '/_authenticated'
    | '/dashboard'
    | '/day-laborers'
    | '/employees'
    | '/infrastructure'
    | '/login'
    | '/parcels'
    | '/register'
    | '/reports'
    | '/settings'
    | '/soil-analysis'
    | '/stock'
    | '/utilities'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ModuleIdRoute: typeof ModuleIdRoute
  AuthenticatedRoute: typeof AuthenticatedRoute
  DashboardRoute: typeof DashboardRoute
  DayLaborersRoute: typeof DayLaborersRoute
  EmployeesRoute: typeof EmployeesRoute
  InfrastructureRoute: typeof InfrastructureRoute
  LoginRoute: typeof LoginRoute
  ParcelsRoute: typeof ParcelsRoute
  RegisterRoute: typeof RegisterRoute
  ReportsRoute: typeof ReportsRoute
  SettingsRoute: typeof SettingsRoute
  SoilAnalysisRoute: typeof SoilAnalysisRoute
  StockRoute: typeof StockRoute
  UtilitiesRoute: typeof UtilitiesRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/utilities': {
      id: '/utilities'
      path: '/utilities'
      fullPath: '/utilities'
      preLoaderRoute: typeof UtilitiesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/stock': {
      id: '/stock'
      path: '/stock'
      fullPath: '/stock'
      preLoaderRoute: typeof StockRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/soil-analysis': {
      id: '/soil-analysis'
      path: '/soil-analysis'
      fullPath: '/soil-analysis'
      preLoaderRoute: typeof SoilAnalysisRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/reports': {
      id: '/reports'
      path: '/reports'
      fullPath: '/reports'
      preLoaderRoute: typeof ReportsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/parcels': {
      id: '/parcels'
      path: '/parcels'
      fullPath: '/parcels'
      preLoaderRoute: typeof ParcelsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/infrastructure': {
      id: '/infrastructure'
      path: '/infrastructure'
      fullPath: '/infrastructure'
      preLoaderRoute: typeof InfrastructureRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/employees': {
      id: '/employees'
      path: '/employees'
      fullPath: '/employees'
      preLoaderRoute: typeof EmployeesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/day-laborers': {
      id: '/day-laborers'
      path: '/day-laborers'
      fullPath: '/day-laborers'
      preLoaderRoute: typeof DayLaborersRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$moduleId': {
      id: '/$moduleId'
      path: '/$moduleId'
      fullPath: '/$moduleId'
      preLoaderRoute: typeof ModuleIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ModuleIdRoute: ModuleIdRoute,
  AuthenticatedRoute: AuthenticatedRoute,
  DashboardRoute: DashboardRoute,
  DayLaborersRoute: DayLaborersRoute,
  EmployeesRoute: EmployeesRoute,
  InfrastructureRoute: InfrastructureRoute,
  LoginRoute: LoginRoute,
  ParcelsRoute: ParcelsRoute,
  RegisterRoute: RegisterRoute,
  ReportsRoute: ReportsRoute,
  SettingsRoute: SettingsRoute,
  SoilAnalysisRoute: SoilAnalysisRoute,
  StockRoute: StockRoute,
  UtilitiesRoute: UtilitiesRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
