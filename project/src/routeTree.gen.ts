/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as WorkersRouteImport } from './routes/workers'
import { Route as UtilitiesRouteImport } from './routes/utilities'
import { Route as StockRouteImport } from './routes/stock'
import { Route as SoilAnalysisRouteImport } from './routes/soil-analysis'
import { Route as SettingsRouteImport } from './routes/settings'
import { Route as SelectTrialRouteImport } from './routes/select-trial'
import { Route as SatelliteAnalysisRouteImport } from './routes/satellite-analysis'
import { Route as ReportsRouteImport } from './routes/reports'
import { Route as RegisterRouteImport } from './routes/register'
import { Route as ProfitabilityRouteImport } from './routes/profitability'
import { Route as ParcelsRouteImport } from './routes/parcels'
import { Route as OnboardingRouteImport } from './routes/onboarding'
import { Route as LoginRouteImport } from './routes/login'
import { Route as InfrastructureRouteImport } from './routes/infrastructure'
import { Route as ForgotPasswordRouteImport } from './routes/forgot-password'
import { Route as FarmHierarchyRouteImport } from './routes/farm-hierarchy'
import { Route as EmployeesRouteImport } from './routes/employees'
import { Route as DayLaborersRouteImport } from './routes/day-laborers'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as CheckoutSuccessRouteImport } from './routes/checkout-success'
import { Route as AnalysesRouteImport } from './routes/analyses'
import { Route as AuthenticatedRouteImport } from './routes/_authenticated'
import { Route as ModuleIdRouteImport } from './routes/$moduleId'
import { Route as IndexRouteImport } from './routes/index'
import { Route as SettingsIndexRouteImport } from './routes/settings.index'
import { Route as OnboardingIndexRouteImport } from './routes/onboarding.index'
import { Route as SettingsUsersRouteImport } from './routes/settings.users'
import { Route as SettingsSubscriptionRouteImport } from './routes/settings.subscription'
import { Route as SettingsProfileRouteImport } from './routes/settings.profile'
import { Route as SettingsPreferencesRouteImport } from './routes/settings.preferences'
import { Route as SettingsOrganizationRouteImport } from './routes/settings.organization'
import { Route as SettingsModulesRouteImport } from './routes/settings.modules'
import { Route as SettingsDashboardRouteImport } from './routes/settings.dashboard'

const WorkersRoute = WorkersRouteImport.update({
  id: '/workers',
  path: '/workers',
  getParentRoute: () => rootRouteImport,
} as any)
const UtilitiesRoute = UtilitiesRouteImport.update({
  id: '/utilities',
  path: '/utilities',
  getParentRoute: () => rootRouteImport,
} as any)
const StockRoute = StockRouteImport.update({
  id: '/stock',
  path: '/stock',
  getParentRoute: () => rootRouteImport,
} as any)
const SoilAnalysisRoute = SoilAnalysisRouteImport.update({
  id: '/soil-analysis',
  path: '/soil-analysis',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const SelectTrialRoute = SelectTrialRouteImport.update({
  id: '/select-trial',
  path: '/select-trial',
  getParentRoute: () => rootRouteImport,
} as any)
const SatelliteAnalysisRoute = SatelliteAnalysisRouteImport.update({
  id: '/satellite-analysis',
  path: '/satellite-analysis',
  getParentRoute: () => rootRouteImport,
} as any)
const ReportsRoute = ReportsRouteImport.update({
  id: '/reports',
  path: '/reports',
  getParentRoute: () => rootRouteImport,
} as any)
const RegisterRoute = RegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRouteImport,
} as any)
const ProfitabilityRoute = ProfitabilityRouteImport.update({
  id: '/profitability',
  path: '/profitability',
  getParentRoute: () => rootRouteImport,
} as any)
const ParcelsRoute = ParcelsRouteImport.update({
  id: '/parcels',
  path: '/parcels',
  getParentRoute: () => rootRouteImport,
} as any)
const OnboardingRoute = OnboardingRouteImport.update({
  id: '/onboarding',
  path: '/onboarding',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const InfrastructureRoute = InfrastructureRouteImport.update({
  id: '/infrastructure',
  path: '/infrastructure',
  getParentRoute: () => rootRouteImport,
} as any)
const ForgotPasswordRoute = ForgotPasswordRouteImport.update({
  id: '/forgot-password',
  path: '/forgot-password',
  getParentRoute: () => rootRouteImport,
} as any)
const FarmHierarchyRoute = FarmHierarchyRouteImport.update({
  id: '/farm-hierarchy',
  path: '/farm-hierarchy',
  getParentRoute: () => rootRouteImport,
} as any)
const EmployeesRoute = EmployeesRouteImport.update({
  id: '/employees',
  path: '/employees',
  getParentRoute: () => rootRouteImport,
} as any)
const DayLaborersRoute = DayLaborersRouteImport.update({
  id: '/day-laborers',
  path: '/day-laborers',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const CheckoutSuccessRoute = CheckoutSuccessRouteImport.update({
  id: '/checkout-success',
  path: '/checkout-success',
  getParentRoute: () => rootRouteImport,
} as any)
const AnalysesRoute = AnalysesRouteImport.update({
  id: '/analyses',
  path: '/analyses',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedRoute = AuthenticatedRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const ModuleIdRoute = ModuleIdRouteImport.update({
  id: '/$moduleId',
  path: '/$moduleId',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsIndexRoute = SettingsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => SettingsRoute,
} as any)
const OnboardingIndexRoute = OnboardingIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => OnboardingRoute,
} as any)
const SettingsUsersRoute = SettingsUsersRouteImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => SettingsRoute,
} as any)
const SettingsSubscriptionRoute = SettingsSubscriptionRouteImport.update({
  id: '/subscription',
  path: '/subscription',
  getParentRoute: () => SettingsRoute,
} as any)
const SettingsProfileRoute = SettingsProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => SettingsRoute,
} as any)
const SettingsPreferencesRoute = SettingsPreferencesRouteImport.update({
  id: '/preferences',
  path: '/preferences',
  getParentRoute: () => SettingsRoute,
} as any)
const SettingsOrganizationRoute = SettingsOrganizationRouteImport.update({
  id: '/organization',
  path: '/organization',
  getParentRoute: () => SettingsRoute,
} as any)
const SettingsModulesRoute = SettingsModulesRouteImport.update({
  id: '/modules',
  path: '/modules',
  getParentRoute: () => SettingsRoute,
} as any)
const SettingsDashboardRoute = SettingsDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => SettingsRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$moduleId': typeof ModuleIdRoute
  '/analyses': typeof AnalysesRoute
  '/checkout-success': typeof CheckoutSuccessRoute
  '/dashboard': typeof DashboardRoute
  '/day-laborers': typeof DayLaborersRoute
  '/employees': typeof EmployeesRoute
  '/farm-hierarchy': typeof FarmHierarchyRoute
  '/forgot-password': typeof ForgotPasswordRoute
  '/infrastructure': typeof InfrastructureRoute
  '/login': typeof LoginRoute
  '/onboarding': typeof OnboardingRouteWithChildren
  '/parcels': typeof ParcelsRoute
  '/profitability': typeof ProfitabilityRoute
  '/register': typeof RegisterRoute
  '/reports': typeof ReportsRoute
  '/satellite-analysis': typeof SatelliteAnalysisRoute
  '/select-trial': typeof SelectTrialRoute
  '/settings': typeof SettingsRouteWithChildren
  '/soil-analysis': typeof SoilAnalysisRoute
  '/stock': typeof StockRoute
  '/utilities': typeof UtilitiesRoute
  '/workers': typeof WorkersRoute
  '/settings/dashboard': typeof SettingsDashboardRoute
  '/settings/modules': typeof SettingsModulesRoute
  '/settings/organization': typeof SettingsOrganizationRoute
  '/settings/preferences': typeof SettingsPreferencesRoute
  '/settings/profile': typeof SettingsProfileRoute
  '/settings/subscription': typeof SettingsSubscriptionRoute
  '/settings/users': typeof SettingsUsersRoute
  '/onboarding/': typeof OnboardingIndexRoute
  '/settings/': typeof SettingsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/$moduleId': typeof ModuleIdRoute
  '/analyses': typeof AnalysesRoute
  '/checkout-success': typeof CheckoutSuccessRoute
  '/dashboard': typeof DashboardRoute
  '/day-laborers': typeof DayLaborersRoute
  '/employees': typeof EmployeesRoute
  '/farm-hierarchy': typeof FarmHierarchyRoute
  '/forgot-password': typeof ForgotPasswordRoute
  '/infrastructure': typeof InfrastructureRoute
  '/login': typeof LoginRoute
  '/parcels': typeof ParcelsRoute
  '/profitability': typeof ProfitabilityRoute
  '/register': typeof RegisterRoute
  '/reports': typeof ReportsRoute
  '/satellite-analysis': typeof SatelliteAnalysisRoute
  '/select-trial': typeof SelectTrialRoute
  '/soil-analysis': typeof SoilAnalysisRoute
  '/stock': typeof StockRoute
  '/utilities': typeof UtilitiesRoute
  '/workers': typeof WorkersRoute
  '/settings/dashboard': typeof SettingsDashboardRoute
  '/settings/modules': typeof SettingsModulesRoute
  '/settings/organization': typeof SettingsOrganizationRoute
  '/settings/preferences': typeof SettingsPreferencesRoute
  '/settings/profile': typeof SettingsProfileRoute
  '/settings/subscription': typeof SettingsSubscriptionRoute
  '/settings/users': typeof SettingsUsersRoute
  '/onboarding': typeof OnboardingIndexRoute
  '/settings': typeof SettingsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/$moduleId': typeof ModuleIdRoute
  '/_authenticated': typeof AuthenticatedRoute
  '/analyses': typeof AnalysesRoute
  '/checkout-success': typeof CheckoutSuccessRoute
  '/dashboard': typeof DashboardRoute
  '/day-laborers': typeof DayLaborersRoute
  '/employees': typeof EmployeesRoute
  '/farm-hierarchy': typeof FarmHierarchyRoute
  '/forgot-password': typeof ForgotPasswordRoute
  '/infrastructure': typeof InfrastructureRoute
  '/login': typeof LoginRoute
  '/onboarding': typeof OnboardingRouteWithChildren
  '/parcels': typeof ParcelsRoute
  '/profitability': typeof ProfitabilityRoute
  '/register': typeof RegisterRoute
  '/reports': typeof ReportsRoute
  '/satellite-analysis': typeof SatelliteAnalysisRoute
  '/select-trial': typeof SelectTrialRoute
  '/settings': typeof SettingsRouteWithChildren
  '/soil-analysis': typeof SoilAnalysisRoute
  '/stock': typeof StockRoute
  '/utilities': typeof UtilitiesRoute
  '/workers': typeof WorkersRoute
  '/settings/dashboard': typeof SettingsDashboardRoute
  '/settings/modules': typeof SettingsModulesRoute
  '/settings/organization': typeof SettingsOrganizationRoute
  '/settings/preferences': typeof SettingsPreferencesRoute
  '/settings/profile': typeof SettingsProfileRoute
  '/settings/subscription': typeof SettingsSubscriptionRoute
  '/settings/users': typeof SettingsUsersRoute
  '/onboarding/': typeof OnboardingIndexRoute
  '/settings/': typeof SettingsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/$moduleId'
    | '/analyses'
    | '/checkout-success'
    | '/dashboard'
    | '/day-laborers'
    | '/employees'
    | '/farm-hierarchy'
    | '/forgot-password'
    | '/infrastructure'
    | '/login'
    | '/onboarding'
    | '/parcels'
    | '/profitability'
    | '/register'
    | '/reports'
    | '/satellite-analysis'
    | '/select-trial'
    | '/settings'
    | '/soil-analysis'
    | '/stock'
    | '/utilities'
    | '/workers'
    | '/settings/dashboard'
    | '/settings/modules'
    | '/settings/organization'
    | '/settings/preferences'
    | '/settings/profile'
    | '/settings/subscription'
    | '/settings/users'
    | '/onboarding/'
    | '/settings/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/$moduleId'
    | '/analyses'
    | '/checkout-success'
    | '/dashboard'
    | '/day-laborers'
    | '/employees'
    | '/farm-hierarchy'
    | '/forgot-password'
    | '/infrastructure'
    | '/login'
    | '/parcels'
    | '/profitability'
    | '/register'
    | '/reports'
    | '/satellite-analysis'
    | '/select-trial'
    | '/soil-analysis'
    | '/stock'
    | '/utilities'
    | '/workers'
    | '/settings/dashboard'
    | '/settings/modules'
    | '/settings/organization'
    | '/settings/preferences'
    | '/settings/profile'
    | '/settings/subscription'
    | '/settings/users'
    | '/onboarding'
    | '/settings'
  id:
    | '__root__'
    | '/'
    | '/$moduleId'
    | '/_authenticated'
    | '/analyses'
    | '/checkout-success'
    | '/dashboard'
    | '/day-laborers'
    | '/employees'
    | '/farm-hierarchy'
    | '/forgot-password'
    | '/infrastructure'
    | '/login'
    | '/onboarding'
    | '/parcels'
    | '/profitability'
    | '/register'
    | '/reports'
    | '/satellite-analysis'
    | '/select-trial'
    | '/settings'
    | '/soil-analysis'
    | '/stock'
    | '/utilities'
    | '/workers'
    | '/settings/dashboard'
    | '/settings/modules'
    | '/settings/organization'
    | '/settings/preferences'
    | '/settings/profile'
    | '/settings/subscription'
    | '/settings/users'
    | '/onboarding/'
    | '/settings/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ModuleIdRoute: typeof ModuleIdRoute
  AuthenticatedRoute: typeof AuthenticatedRoute
  AnalysesRoute: typeof AnalysesRoute
  CheckoutSuccessRoute: typeof CheckoutSuccessRoute
  DashboardRoute: typeof DashboardRoute
  DayLaborersRoute: typeof DayLaborersRoute
  EmployeesRoute: typeof EmployeesRoute
  FarmHierarchyRoute: typeof FarmHierarchyRoute
  ForgotPasswordRoute: typeof ForgotPasswordRoute
  InfrastructureRoute: typeof InfrastructureRoute
  LoginRoute: typeof LoginRoute
  OnboardingRoute: typeof OnboardingRouteWithChildren
  ParcelsRoute: typeof ParcelsRoute
  ProfitabilityRoute: typeof ProfitabilityRoute
  RegisterRoute: typeof RegisterRoute
  ReportsRoute: typeof ReportsRoute
  SatelliteAnalysisRoute: typeof SatelliteAnalysisRoute
  SelectTrialRoute: typeof SelectTrialRoute
  SettingsRoute: typeof SettingsRouteWithChildren
  SoilAnalysisRoute: typeof SoilAnalysisRoute
  StockRoute: typeof StockRoute
  UtilitiesRoute: typeof UtilitiesRoute
  WorkersRoute: typeof WorkersRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/workers': {
      id: '/workers'
      path: '/workers'
      fullPath: '/workers'
      preLoaderRoute: typeof WorkersRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/utilities': {
      id: '/utilities'
      path: '/utilities'
      fullPath: '/utilities'
      preLoaderRoute: typeof UtilitiesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/stock': {
      id: '/stock'
      path: '/stock'
      fullPath: '/stock'
      preLoaderRoute: typeof StockRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/soil-analysis': {
      id: '/soil-analysis'
      path: '/soil-analysis'
      fullPath: '/soil-analysis'
      preLoaderRoute: typeof SoilAnalysisRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/select-trial': {
      id: '/select-trial'
      path: '/select-trial'
      fullPath: '/select-trial'
      preLoaderRoute: typeof SelectTrialRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/satellite-analysis': {
      id: '/satellite-analysis'
      path: '/satellite-analysis'
      fullPath: '/satellite-analysis'
      preLoaderRoute: typeof SatelliteAnalysisRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/reports': {
      id: '/reports'
      path: '/reports'
      fullPath: '/reports'
      preLoaderRoute: typeof ReportsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/profitability': {
      id: '/profitability'
      path: '/profitability'
      fullPath: '/profitability'
      preLoaderRoute: typeof ProfitabilityRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/parcels': {
      id: '/parcels'
      path: '/parcels'
      fullPath: '/parcels'
      preLoaderRoute: typeof ParcelsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/onboarding': {
      id: '/onboarding'
      path: '/onboarding'
      fullPath: '/onboarding'
      preLoaderRoute: typeof OnboardingRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/infrastructure': {
      id: '/infrastructure'
      path: '/infrastructure'
      fullPath: '/infrastructure'
      preLoaderRoute: typeof InfrastructureRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/forgot-password': {
      id: '/forgot-password'
      path: '/forgot-password'
      fullPath: '/forgot-password'
      preLoaderRoute: typeof ForgotPasswordRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/farm-hierarchy': {
      id: '/farm-hierarchy'
      path: '/farm-hierarchy'
      fullPath: '/farm-hierarchy'
      preLoaderRoute: typeof FarmHierarchyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/employees': {
      id: '/employees'
      path: '/employees'
      fullPath: '/employees'
      preLoaderRoute: typeof EmployeesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/day-laborers': {
      id: '/day-laborers'
      path: '/day-laborers'
      fullPath: '/day-laborers'
      preLoaderRoute: typeof DayLaborersRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/checkout-success': {
      id: '/checkout-success'
      path: '/checkout-success'
      fullPath: '/checkout-success'
      preLoaderRoute: typeof CheckoutSuccessRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/analyses': {
      id: '/analyses'
      path: '/analyses'
      fullPath: '/analyses'
      preLoaderRoute: typeof AnalysesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$moduleId': {
      id: '/$moduleId'
      path: '/$moduleId'
      fullPath: '/$moduleId'
      preLoaderRoute: typeof ModuleIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings/': {
      id: '/settings/'
      path: '/'
      fullPath: '/settings/'
      preLoaderRoute: typeof SettingsIndexRouteImport
      parentRoute: typeof SettingsRoute
    }
    '/onboarding/': {
      id: '/onboarding/'
      path: '/'
      fullPath: '/onboarding/'
      preLoaderRoute: typeof OnboardingIndexRouteImport
      parentRoute: typeof OnboardingRoute
    }
    '/settings/users': {
      id: '/settings/users'
      path: '/users'
      fullPath: '/settings/users'
      preLoaderRoute: typeof SettingsUsersRouteImport
      parentRoute: typeof SettingsRoute
    }
    '/settings/subscription': {
      id: '/settings/subscription'
      path: '/subscription'
      fullPath: '/settings/subscription'
      preLoaderRoute: typeof SettingsSubscriptionRouteImport
      parentRoute: typeof SettingsRoute
    }
    '/settings/profile': {
      id: '/settings/profile'
      path: '/profile'
      fullPath: '/settings/profile'
      preLoaderRoute: typeof SettingsProfileRouteImport
      parentRoute: typeof SettingsRoute
    }
    '/settings/preferences': {
      id: '/settings/preferences'
      path: '/preferences'
      fullPath: '/settings/preferences'
      preLoaderRoute: typeof SettingsPreferencesRouteImport
      parentRoute: typeof SettingsRoute
    }
    '/settings/organization': {
      id: '/settings/organization'
      path: '/organization'
      fullPath: '/settings/organization'
      preLoaderRoute: typeof SettingsOrganizationRouteImport
      parentRoute: typeof SettingsRoute
    }
    '/settings/modules': {
      id: '/settings/modules'
      path: '/modules'
      fullPath: '/settings/modules'
      preLoaderRoute: typeof SettingsModulesRouteImport
      parentRoute: typeof SettingsRoute
    }
    '/settings/dashboard': {
      id: '/settings/dashboard'
      path: '/dashboard'
      fullPath: '/settings/dashboard'
      preLoaderRoute: typeof SettingsDashboardRouteImport
      parentRoute: typeof SettingsRoute
    }
  }
}

interface OnboardingRouteChildren {
  OnboardingIndexRoute: typeof OnboardingIndexRoute
}

const OnboardingRouteChildren: OnboardingRouteChildren = {
  OnboardingIndexRoute: OnboardingIndexRoute,
}

const OnboardingRouteWithChildren = OnboardingRoute._addFileChildren(
  OnboardingRouteChildren,
)

interface SettingsRouteChildren {
  SettingsDashboardRoute: typeof SettingsDashboardRoute
  SettingsModulesRoute: typeof SettingsModulesRoute
  SettingsOrganizationRoute: typeof SettingsOrganizationRoute
  SettingsPreferencesRoute: typeof SettingsPreferencesRoute
  SettingsProfileRoute: typeof SettingsProfileRoute
  SettingsSubscriptionRoute: typeof SettingsSubscriptionRoute
  SettingsUsersRoute: typeof SettingsUsersRoute
  SettingsIndexRoute: typeof SettingsIndexRoute
}

const SettingsRouteChildren: SettingsRouteChildren = {
  SettingsDashboardRoute: SettingsDashboardRoute,
  SettingsModulesRoute: SettingsModulesRoute,
  SettingsOrganizationRoute: SettingsOrganizationRoute,
  SettingsPreferencesRoute: SettingsPreferencesRoute,
  SettingsProfileRoute: SettingsProfileRoute,
  SettingsSubscriptionRoute: SettingsSubscriptionRoute,
  SettingsUsersRoute: SettingsUsersRoute,
  SettingsIndexRoute: SettingsIndexRoute,
}

const SettingsRouteWithChildren = SettingsRoute._addFileChildren(
  SettingsRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ModuleIdRoute: ModuleIdRoute,
  AuthenticatedRoute: AuthenticatedRoute,
  AnalysesRoute: AnalysesRoute,
  CheckoutSuccessRoute: CheckoutSuccessRoute,
  DashboardRoute: DashboardRoute,
  DayLaborersRoute: DayLaborersRoute,
  EmployeesRoute: EmployeesRoute,
  FarmHierarchyRoute: FarmHierarchyRoute,
  ForgotPasswordRoute: ForgotPasswordRoute,
  InfrastructureRoute: InfrastructureRoute,
  LoginRoute: LoginRoute,
  OnboardingRoute: OnboardingRouteWithChildren,
  ParcelsRoute: ParcelsRoute,
  ProfitabilityRoute: ProfitabilityRoute,
  RegisterRoute: RegisterRoute,
  ReportsRoute: ReportsRoute,
  SatelliteAnalysisRoute: SatelliteAnalysisRoute,
  SelectTrialRoute: SelectTrialRoute,
  SettingsRoute: SettingsRouteWithChildren,
  SoilAnalysisRoute: SoilAnalysisRoute,
  StockRoute: StockRoute,
  UtilitiesRoute: UtilitiesRoute,
  WorkersRoute: WorkersRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
